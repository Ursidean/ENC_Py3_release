# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_mcl')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_mcl')
    _mcl = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mcl', [dirname(__file__)])
        except ImportError:
            import _mcl
            return _mcl
        try:
            _mod = imp.load_module('_mcl', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _mcl = swig_import_helper()
    del swig_import_helper
else:
    import _mcl
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def createAnalysis():
    return _mcl.createAnalysis()
createAnalysis = _mcl.createAnalysis

def loadMapSimulated(analysisID, file1):
    return _mcl.loadMapSimulated(analysisID, file1)
loadMapSimulated = _mcl.loadMapSimulated

def loadMap1(analysisID, file1):
    return _mcl.loadMap1(analysisID, file1)
loadMap1 = _mcl.loadMap1

def loadMapActual(analysisID, file1):
    return _mcl.loadMapActual(analysisID, file1)
loadMapActual = _mcl.loadMapActual

def loadMap2(analysisID, file1):
    return _mcl.loadMap2(analysisID, file1)
loadMap2 = _mcl.loadMap2

def loadOriginalMap(analysisID, file1):
    return _mcl.loadOriginalMap(analysisID, file1)
loadOriginalMap = _mcl.loadOriginalMap

def loadMaskingMap(analysisID, file1):
    return _mcl.loadMaskingMap(analysisID, file1)
loadMaskingMap = _mcl.loadMaskingMap

def getKappa(analysisID):
    return _mcl.getKappa(analysisID)
getKappa = _mcl.getKappa

def getKappaSim(analysisID):
    return _mcl.getKappaSim(analysisID)
getKappaSim = _mcl.getKappaSim

def loadFuzzyWeights(analysisID, weights_file):
    return _mcl.loadFuzzyWeights(analysisID, weights_file)
loadFuzzyWeights = _mcl.loadFuzzyWeights

def viewFuzzySimilarityMap(analysisID):
    return _mcl.viewFuzzySimilarityMap(analysisID)
viewFuzzySimilarityMap = _mcl.viewFuzzySimilarityMap

def printFuzzySimilarityMap(analysisID, map_file):
    return _mcl.printFuzzySimilarityMap(analysisID, map_file)
printFuzzySimilarityMap = _mcl.printFuzzySimilarityMap

def getFuzzyKappa(analysisID):
    return _mcl.getFuzzyKappa(analysisID)
getFuzzyKappa = _mcl.getFuzzyKappa

def loadTransitionFuzzyWeights(analysisID, weights_file):
    return _mcl.loadTransitionFuzzyWeights(analysisID, weights_file)
loadTransitionFuzzyWeights = _mcl.loadTransitionFuzzyWeights

def viewFuzzyTransitionsSimilarityMap(analysisID):
    return _mcl.viewFuzzyTransitionsSimilarityMap(analysisID)
viewFuzzyTransitionsSimilarityMap = _mcl.viewFuzzyTransitionsSimilarityMap

def printFuzzyTransitionsSimilarityMap(analysisID, map_file):
    return _mcl.printFuzzyTransitionsSimilarityMap(analysisID, map_file)
printFuzzyTransitionsSimilarityMap = _mcl.printFuzzyTransitionsSimilarityMap

def getFuzzyKappaSim(analysisID):
    return _mcl.getFuzzyKappaSim(analysisID)
getFuzzyKappaSim = _mcl.getFuzzyKappaSim

def map1ID():
    return _mcl.map1ID()
map1ID = _mcl.map1ID

def mapActualID():
    return _mcl.mapActualID()
mapActualID = _mcl.mapActualID

def map2ID():
    return _mcl.map2ID()
map2ID = _mcl.map2ID

def mapSimulatedID():
    return _mcl.mapSimulatedID()
mapSimulatedID = _mcl.mapSimulatedID

def mapOriginalID():
    return _mcl.mapOriginalID()
mapOriginalID = _mcl.mapOriginalID

def numClasses(analysisID, max_class_id):
    return _mcl.numClasses(analysisID, max_class_id)
numClasses = _mcl.numClasses

def getClumpiness(analysisID, which_map, class_val):
    return _mcl.getClumpiness(analysisID, which_map, class_val)
getClumpiness = _mcl.getClumpiness

def setClumpinessClasses(analysisID, num_classes, class_vals):
    return _mcl.setClumpinessClasses(analysisID, num_classes, class_vals)
setClumpinessClasses = _mcl.setClumpinessClasses

def getAvgClumpinessDifference(analysisID, which_map_1, which_map_2):
    return _mcl.getAvgClumpinessDifference(analysisID, which_map_1, which_map_2)
getAvgClumpinessDifference = _mcl.getAvgClumpinessDifference

def getWeightedClumpinessDifference(analysisID, which_map_1, which_map_2):
    return _mcl.getWeightedClumpinessDifference(analysisID, which_map_1, which_map_2)
getWeightedClumpinessDifference = _mcl.getWeightedClumpinessDifference

def clear(analysisID):
    return _mcl.clear(analysisID)
clear = _mcl.clear

def clearAll():
    return _mcl.clearAll()
clearAll = _mcl.clearAll
# This file is compatible with both classic and new-style classes.


